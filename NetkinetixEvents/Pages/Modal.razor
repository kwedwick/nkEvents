@page "/modal"
@page "/modal/{seId:int}"
@inject ISiteEventService SiteEventService
@using Microsoft.AspNetCore.Components.Forms

<BSButton Class="btn btn-success" Target="@counter">@btnText</BSButton>

<BSModal IsCentered="true" DataId="@counter" HideOnValidSubmit="true">
    <BSForm Model="seEvent" OnValidSubmit="OnSubmit" OnReset="OnReset">
        <DataAnnotationsValidator />
        <BSModalHeader>@btnText</BSModalHeader>
        <BSCol Position="Position.Relative" ColumnMedium="12">
            @_message
            <BSValidationSummary />
        </BSCol>
        <BSModalContent>
        <div>
            <BSLabel for="title">Title</BSLabel>
                <BSInput InputType="InputType.Text" id="title" @bind-Value="seEvent.seTitle" class="form-control" ValidateOnInput="true"></BSInput>
                <BSFeedback For="@(() => seEvent.seTitle)" ValidMessage="Title looks good." />
        </div>
        <div>
            <BSLabel for="description">Description</BSLabel>
            <BSInput id="lastName" @bind-Value="seEvent.seDescription" class="form-control"></BSInput>
                <BSFeedback For="@(() => seEvent.seDescription)" ValidMessage="Description looks good." />
        </div>
        <div>
            <BSLabel for="startDate">Start Date</BSLabel>
            <BSInput id="startDate" InputType="InputType.Date" @bind-Value="seEvent.seStartDate" />
                <BSFeedback For="@(() => seEvent.seStartDate)" ValidMessage="Start Date looks good." />
        </div>
        <div>
            <BSLabel for="endDate">End Date</BSLabel>
            <BSInput id="endDate" InputType="InputType.Date" @bind-Value="seEvent.seEndDate" />
                <BSFeedback For="@(() => seEvent.seEndDate)" ValidMessage="End Date looks good." />
        </div>
            <div>
                <BSLabel for="location">Location</BSLabel>
                <BSInput id="location" @bind-Value="seEvent.seLocation" class="form-control"></BSInput>
                <BSFeedback For="@(() => seEvent.seLocation)" ValidMessage="Location looks good." />
            </div>
            <div>
                <BSLabel for="url">URL</BSLabel>
                <BSInput id="url" @bind-Value="seEvent.seURL" class="form-control"></BSInput>
                <BSFeedback For="@(() => seEvent.seURL)" ValidMessage="URL looks good." />
            </div>
            <div>
                <BSInputCheckbox CheckedValue="@(false)" UnCheckedValue="@(true)" @bind-Value="seEvent.seActive" />
                <BSLabel IsCheckLabel="false" >Hide Event</BSLabel>
            </div>
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="@counter">Cancel</BSButton>
            <BSButton IsSubmit="true" Color="BSColor.Primary">@btnText</BSButton>
            <BSButton Color="BSColor.Danger" IsReset="true">Reset</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>


@code {
    [Parameter]
    public int? seId { get; set; }
    [Parameter]
    public EventCallback<Task> OnClickCallback { get; set; }

    string btnText = string.Empty;
    public string counter = "AddEditModal";
    private string _message = "";

    SiteEvent seEvent = new SiteEvent { };

    protected override async Task OnInitializedAsync()
    {
        btnText = seId == null ? "Add New Event" : "Update Event";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (seId != null)
        {
            counter += seId;
            seEvent = await SiteEventService.GetOneSiteEvent((int)seId);
            if (seEvent == null)
            {
                seEvent.seActive = true;
            }
        }
    }

    async Task HandleSubmit()
    {
        if (seId == null)
        {
            Console.WriteLine("This is Create Event");
            seEvent.seId = 0;
            Console.WriteLine(seEvent.seActive);
            await SiteEventService.CreateSiteEvent(seEvent);
            await OnClickCallback.InvokeAsync();
        }
        else
        {
            Console.WriteLine("This is Update Event");
            await SiteEventService.UpdateSiteEvent(seEvent);
            await OnClickCallback.InvokeAsync();
        }
    }

    async Task OnSubmit(EditContext e)
    {
        if (e.Validate())
        {
            _message = "Submitted to database";
            await HandleSubmit();
        }
    }

    private void OnReset(IBSForm bSForm)
    {
        _message = "";
        bSForm.Reset();
    }
}
