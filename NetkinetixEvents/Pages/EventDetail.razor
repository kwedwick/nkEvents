@page "/event"
@page "/event/{seId:int}"
@inject ISiteEventService SiteEventService
@inject NavigationManager NavigationManager

@if (seId == null && !seEvent.seActive)
{
    <PageTitle>No event found</PageTitle>
    <BSCard CardType="CardType.Card">
    <BSCard CardType="CardType.Text">No Event Found :( </BSCard>
    <BSButton Color="BSColor.Primary" OnClick=BackToEventList>Go Back To Event List</BSButton>
    </BSCard>
}
else if (seId == null || !seEvent.seActive)
{
    <PageTitle>No event found</PageTitle>
    <BSCard CardType="CardType.Card">
        <BSCard CardType="CardType.Text">No Event Found :( </BSCard>
        <BSButton Color="BSColor.Primary" OnClick=BackToEventList>Go Back To Event List</BSButton>
    </BSCard>
}
else
{
    <BSCard CardType="CardType.Card">
        <BSCard CardType="CardType.Title">@seEvent.seTitle</BSCard>
        <BSCard CardType="CardType.Text">
            @seEvent.seDescription
        </BSCard>
        <BSCard CardType="CardType.Text">@seEvent.seLocation</BSCard>
        <BSCard CardType="CardType.Text">Start Date: @seEvent.seStartDate.ToString("MM/dd/yyyy")</BSCard>
        <BSCard CardType="CardType.Text">End Date: @seEvent.seEndDate?.ToString("MM/dd/yyyy")</BSCard>
        <BSButton Class="btn-outline-secondary" href="@seEvent.seURL">Visit Event Website</BSButton>
        <BSButton Class="btn-outline-primary" OnClick=BackToEventList>Go Back To Event List</BSButton>
    </BSCard>
}


@code {
    [Parameter]
    public int? seId { get; set; }

    SiteEvent seEvent = new SiteEvent { };

    protected override async Task OnParametersSetAsync()
    {
        if(seId != null)
        {
            seEvent = await SiteEventService.GetOneSiteEvent((int)seId);
            if (seEvent == null)
            {
                seEvent.seActive = false;
            }
        }
    }

    void BackToEventList()
    {
        NavigationManager.NavigateTo("/");
    }
}
